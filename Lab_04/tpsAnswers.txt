1. Open MemCast.c, compile and run the program. What do you expect the program to print? (%x in 
printf allows an integer to be printed in Hex format).
its expected to print 2. 
2. Before changing the code, what do you expect the program to print if you print four_ints[0] 
again at the end of the program? 
we expect a hex format value.
3. Insert a print statement to output four_ints[0] at the end of the program and verify your answer 
from (2). 
it was an address 
it printed 44434241
4. Now add a print statement to the program so it will print out four_ints[1]. What does it print? Are 
you surprised (or lost) by the results? 
it prints 2. i am surprised the contents inside should be messed with. to look like four_ints[0]
5. Let us study the code carefully and investigate what happened. No, the memory did not go crazy.  
a. How many array(s) were allocated in this program? 
only 1 array is allocated as a pointer at line 12
b. Are four_ints and four_c pointing to the same location? 
yes four_c points to fourInts
c. Verify your answer of (b) by printing out the values of four_ints and four_c.  
6. Write a loop to print out the addresses and values (in Hex) of all the elements of four_ints. What is 
the difference in addresses between two consecutive elements? Discuss what this difference means. 
7. Use a piece of paper to draw the layout of the array horizontally so that the smallest address begins 
from the RIGHT-hand-side. Indicate the address and value of each element based on the results of 
(6). You can draw it digitally. 
8. Now, write a loop to print out the same information for four_c as you did in (6). What is the 
difference in addresses between two consecutive elements? Discuss what this difference means. 
9. Use the same piece of paper (or file) from (7) to draw a similar structure for four_c. 
10. By comparing the layout of the array pointed by the two pointers, what do you observe in terms of how 
C accesses memory when the index of an array is incremented? 

tps 2

1. Open Array2D.c. This program will create a n x n array of int. Explain what line #8 does.

creates a 2d array of size nXn and n is = 5 so it is a 2d array of size 5 by 5
2. Since every array must be allocated in the memory before it can be used, we need to allocate the rows 
one by one. To do this, we need to be able to access the pointers from the first array (pointed by arr). 
Assuming i is the index of that array, how do we access the ith value of the array?  
3. Without using array notations ([]), insert code to complete allocating all the rows and initialize all 
contents to be 0. Your code should work with different values for n. Hint: if j is the index of each 
row, how do you access arr[i][j] in pointer notation? 
4. To verify whether you have created your array correctly, we need a function to print out the array. The 
function printArray has been declared. It takes in both the array to be printed and size of array. Why 
do we need to pass the size as an argument? 
5. Complete printArray so it prints out the content and layout of an array correctly.  
6. Now, let us modify the content of the array. Insert code to make the array into a diagonal matrix that 
looks like the following (again, do not limit the size to 5): 