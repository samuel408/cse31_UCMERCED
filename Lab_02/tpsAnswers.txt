
tps activity 1
1. jonathan Garcia & ariana Curtis

tps activity 2
. How do you compile your punishment.c so that you can debug it using GDB (or LLDB for MAC)? 
Try it with your code and set the name of the executable to punish. 
2. Once punishment.c is compiled, how do you load it in GDB (or LLDB for MAC)? Try it with your 
program. 
3. Once punish is loaded, how do you run it in GDB (or LLDB for MAC)? Try to run your punish. 
once it is loaded just command run in the LLDB
4. What are breakpoints? How do you set a breakpoint at a certain line of your program? Try to set a 
breakpoint in punishment.c where the for loop begins. 
to set a break point on line #12 you command  bt -l 12;
5. Now run the program again. It should stop at the breakpoint you set in Q4. From here, how do you run 
the program line by line? Try to run the next 3 lines with your program. 
just keep breaking the breakpoint down and hit run.
6. While you are still running punish line by line, how can you see the value of a variable? Pick 3 variables 
in your program and display them in the terminal one by one.
we commans display <var> command

7. Now that you are tired of running line by line, how do you let the program finish its run? Try to finish 
running your punish. 
we command back trace.
8. How do you exit from GDB (or LLDB for MAC)? 
we command exit.

tps 3
1. How many variables were declared in the first line of main()? How many of them are pointers (and 
what are they)? 
4 variables are declared, yet only 2 of them are pointers. the pointer are *px and *py.
2. What will be the values of x, y, and arr[0] if you run the program? Validate your answer by running 
the program. Why do you think it happens that way? You will need to insert printf statements to 
display those values. 
3. How do you prevent x, y, and the content of arr from having unexpected values? Try to fix them in 
the program. 
assign the values of the variables to 0.
4. The moment you have declared a variable, the program will allocate a memory location for it. Each 
memory location has an address. Now insert printf statements to display the addresses of x and y. 
5. Now insert code so that px points to x and py points to y. Print out the values and addresses of those 
pointers using only the pointer variables (yes, pointers have addresses too!). You should see that the value of 
px is equal to the address of x, and the same is true for py and y. 
px=&x
py=&y
6. As we have learned in lectures, an array name can be used as a pointer to access the content of the array. 
Write a loop to output the contents of arr by using arr as a pointer (do not use [] in your loop). 
7. Are array names really the same as pointers? Let us find out! An array name points to the first element 
of an array, so arr should point to the address of arr[0]. Insert code to verify this. 
8. Now print out the address of arr. Does the result make sense? Why? 
 
